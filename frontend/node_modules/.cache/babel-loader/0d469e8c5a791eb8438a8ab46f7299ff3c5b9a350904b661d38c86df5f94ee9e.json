{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\nconst API_URL = 'http://localhost:8080/api';\nexport const fetchDeployments = createAsyncThunk('deployments/fetchDeployments', async () => {\n  const response = await axios.get(`${API_URL}/deployments`);\n  return response.data;\n});\nexport const createDeployment = createAsyncThunk('deployments/createDeployment', async deployment => {\n  const response = await axios.post(`${API_URL}/deployments`, deployment);\n  return response.data;\n});\nexport const updateDeployment = createAsyncThunk('deployments/updateDeployment', async ({\n  id,\n  deployment\n}) => {\n  const response = await axios.put(`${API_URL}/deployments/${id}`, deployment);\n  return response.data;\n});\nconst deploymentsSlice = createSlice({\n  name: 'deployments',\n  initialState: {\n    items: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchDeployments.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchDeployments.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.items = action.payload;\n    }).addCase(fetchDeployments.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(createDeployment.fulfilled, (state, action) => {\n      state.items.push(action.payload);\n    }).addCase(updateDeployment.fulfilled, (state, action) => {\n      const index = state.items.findIndex(d => d.id === action.payload.id);\n      if (index !== -1) {\n        state.items[index] = action.payload;\n      }\n    });\n  }\n});\nexport default deploymentsSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","API_URL","fetchDeployments","response","get","data","createDeployment","deployment","post","updateDeployment","id","put","deploymentsSlice","name","initialState","items","status","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","push","index","findIndex","d","reducer"],"sources":["/Users/manasisawant/deploywatch/frontend/src/store/deploymentsSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\nconst API_URL = 'http://localhost:8080/api';\n\nexport const fetchDeployments = createAsyncThunk(\n  'deployments/fetchDeployments',\n  async () => {\n    const response = await axios.get(`${API_URL}/deployments`);\n    return response.data;\n  }\n);\n\nexport const createDeployment = createAsyncThunk(\n  'deployments/createDeployment',\n  async (deployment) => {\n    const response = await axios.post(`${API_URL}/deployments`, deployment);\n    return response.data;\n  }\n);\n\nexport const updateDeployment = createAsyncThunk(\n  'deployments/updateDeployment',\n  async ({ id, deployment }) => {\n    const response = await axios.put(`${API_URL}/deployments/${id}`, deployment);\n    return response.data;\n  }\n);\n\nconst deploymentsSlice = createSlice({\n  name: 'deployments',\n  initialState: {\n    items: [],\n    status: 'idle',\n    error: null,\n  },\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchDeployments.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchDeployments.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.items = action.payload;\n      })\n      .addCase(fetchDeployments.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(createDeployment.fulfilled, (state, action) => {\n        state.items.push(action.payload);\n      })\n      .addCase(updateDeployment.fulfilled, (state, action) => {\n        const index = state.items.findIndex(d => d.id === action.payload.id);\n        if (index !== -1) {\n          state.items[index] = action.payload;\n        }\n      });\n  },\n});\n\nexport default deploymentsSlice.reducer; "],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,OAAO,GAAG,2BAA2B;AAE3C,OAAO,MAAMC,gBAAgB,GAAGH,gBAAgB,CAC9C,8BAA8B,EAC9B,YAAY;EACV,MAAMI,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAC,GAAGH,OAAO,cAAc,CAAC;EAC1D,OAAOE,QAAQ,CAACE,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAGP,gBAAgB,CAC9C,8BAA8B,EAC9B,MAAOQ,UAAU,IAAK;EACpB,MAAMJ,QAAQ,GAAG,MAAMH,KAAK,CAACQ,IAAI,CAAC,GAAGP,OAAO,cAAc,EAAEM,UAAU,CAAC;EACvE,OAAOJ,QAAQ,CAACE,IAAI;AACtB,CACF,CAAC;AAED,OAAO,MAAMI,gBAAgB,GAAGV,gBAAgB,CAC9C,8BAA8B,EAC9B,OAAO;EAAEW,EAAE;EAAEH;AAAW,CAAC,KAAK;EAC5B,MAAMJ,QAAQ,GAAG,MAAMH,KAAK,CAACW,GAAG,CAAC,GAAGV,OAAO,gBAAgBS,EAAE,EAAE,EAAEH,UAAU,CAAC;EAC5E,OAAOJ,QAAQ,CAACE,IAAI;AACtB,CACF,CAAC;AAED,MAAMO,gBAAgB,GAAGd,WAAW,CAAC;EACnCe,IAAI,EAAE,aAAa;EACnBC,YAAY,EAAE;IACZC,KAAK,EAAE,EAAE;IACTC,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACnB,gBAAgB,CAACoB,OAAO,EAAGC,KAAK,IAAK;MAC5CA,KAAK,CAACP,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDK,OAAO,CAACnB,gBAAgB,CAACsB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACtDF,KAAK,CAACP,MAAM,GAAG,WAAW;MAC1BO,KAAK,CAACR,KAAK,GAAGU,MAAM,CAACC,OAAO;IAC9B,CAAC,CAAC,CACDL,OAAO,CAACnB,gBAAgB,CAACyB,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACrDF,KAAK,CAACP,MAAM,GAAG,QAAQ;MACvBO,KAAK,CAACN,KAAK,GAAGQ,MAAM,CAACR,KAAK,CAACW,OAAO;IACpC,CAAC,CAAC,CACDP,OAAO,CAACf,gBAAgB,CAACkB,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACtDF,KAAK,CAACR,KAAK,CAACc,IAAI,CAACJ,MAAM,CAACC,OAAO,CAAC;IAClC,CAAC,CAAC,CACDL,OAAO,CAACZ,gBAAgB,CAACe,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACtD,MAAMK,KAAK,GAAGP,KAAK,CAACR,KAAK,CAACgB,SAAS,CAACC,CAAC,IAAIA,CAAC,CAACtB,EAAE,KAAKe,MAAM,CAACC,OAAO,CAAChB,EAAE,CAAC;MACpE,IAAIoB,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBP,KAAK,CAACR,KAAK,CAACe,KAAK,CAAC,GAAGL,MAAM,CAACC,OAAO;MACrC;IACF,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAed,gBAAgB,CAACqB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}